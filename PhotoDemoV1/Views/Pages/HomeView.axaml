<UserControl xmlns="https://github.com/avaloniaui"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
             mc:Ignorable="d" d:DesignWidth="1160" d:DesignHeight="740"
			 xmlns:vm="using:PhotoDemoV1.ViewModels"
             x:Class="PhotoDemoV1.Views.HomeView"
			 x:DataType="vm:HomeViewModel">
	<Design.DataContext>
		<!-- This only sets the DataContext for the previewer in an IDE,
         to set the actual DataContext for runtime, set the DataContext property in code (look at App.axaml.cs) -->
		<vm:HomeViewModel/>
	</Design.DataContext>
	
	<UserControl.Styles>
		<!-- 自定义滚动条样式 -->
		<Style Selector="ScrollBar">
			<Setter Property="Width" Value="4" />
		</Style>
		<Style Selector="ScrollBar /template/ Thumb">
			<Setter Property="BorderThickness" Value="0" />
			<Setter Property="CornerRadius" Value="5" />
		</Style>

		<!--给 Button 批量设置圆角的方法，仅需在 Button 上写 Classes="roundy" 即可-->
		<!--<Style Selector="Button.roundy /template/ ContentPresenter">
			<Setter Property="CornerRadius" Value="5" />
		</Style>-->

		<!--使用新模板重绘 Button 的模板-->
		<!--注：BorderBrush 和 BorderThickness 属性直接写在Button里而不写在 Border 里-->
		<Style Selector="Button.roundy">
			<Setter Property="Template">
				<ControlTemplate>
					<Border Background="{TemplateBinding Background}"
							BorderBrush="{TemplateBinding BorderBrush}"
							BorderThickness="{TemplateBinding BorderThickness}"
							CornerRadius="5">
						<ContentPresenter Content="{TemplateBinding Content}"
										  Padding="{TemplateBinding Padding}"
										  VerticalContentAlignment="Center"/>
					</Border>
				</ControlTemplate>
			</Setter>
		</Style>

		<Style Selector="Button.likeTextBlock" >
			<Setter Property="Background" Value="Transparent"/>
			<Setter Property="BorderThickness" Value="0, 0, 0, 1"/>
			<Setter Property="BorderBrush" Value="Gray"/>
			<Setter Property="CornerRadius" Value="0"/>
			<Setter Property="Margin" Value="5, 0"/>
			<Setter Property="FontSize" Value="14"/>
			<Setter Property="FontFamily" Value="微软雅黑"/>
			<Setter Property="Cursor" Value="Hand"/>
		</Style>

	</UserControl.Styles>

	<Grid ColumnDefinitions="*, 320">

		<!--左侧设置栏-->
		<StackPanel>
			<Border>
				<DockPanel LastChildFill="False">
					<TextBlock DockPanel.Dock="Top"
							   Text="文件夹"
							   FontSize="20"
							   FontWeight="Bold"
							   FontFamily="微软雅黑"
							   VerticalAlignment="Top"
							   Margin="5, 10"/>
					<StackPanel DockPanel.Dock="Top">
						<DockPanel Margin="5"
								   MaxHeight="135">
							<Button Width="140"
									Height="{Binding $parent.Height}"
									Content="输入目录..."
									FontSize="16"
									FontFamily="微软雅黑"
									Command="{Binding OpenInputFolderCommand}"
									CommandParameter="{Binding $self}"
									VerticalAlignment="Top"/>
							<ScrollViewer>
								<ItemsControl ItemsSource="{Binding InputPaths}">
									<ItemsControl.ItemTemplate>
										<DataTemplate>
											<!--注：(vm:HomeViewModel) 是对 DataContext 进行的显式类型转换-->
											<!--详见 https://stackoverflow.com/questions/77280031/avalonia-ui-bind-button-command-in-a-listbox-to-the-viewmodel-instead-of-the-it-->
											<Button Classes="likeTextBlock"
													HorizontalAlignment="Stretch"
													Width="{Binding $parent.Width}"
													Content="{Binding}"
													Command="{Binding $parent[ItemsControl].((vm:HomeViewModel)DataContext).OpenInputFolderCommand}"
													CommandParameter="{Binding $self}"/>
										</DataTemplate>
									</ItemsControl.ItemTemplate>
								</ItemsControl>
							</ScrollViewer>
						</DockPanel>
						

						<DockPanel Height="35"
								   Margin="5">
							<Button Width="140"
									Height="{Binding $parent.Height}"
									Content="输出目录..."
									FontSize="16"
									FontFamily="微软雅黑"
									Command="{Binding OpenOutputFolderCommand}"
									CommandParameter="{Binding $self}"/>
							<Button Classes="likeTextBlock" 
									Command="{Binding OpenOutputFolderCommand}"
									CommandParameter="{Binding $self}"
									HorizontalAlignment="Stretch"
									Width="{Binding $parent.Width}"
									Content="{Binding OutputPath}"/>
						</DockPanel>
					</StackPanel>
				</DockPanel>
			</Border>
			<Border Height="240"
					Background="#8F8F8F"/>
		</StackPanel>

		<!--右侧预览窗及启动按钮-->
		<Border Grid.Column="1"
				Width="320"
				Margin="10, 5">
			<Grid RowDefinitions="480, *, 80">
				<UniformGrid Grid.Row="0"
							 Rows="2"
							 Height="480">
					<Button Margin="5, 5, 10, 5"
							Height="230"
							Width="310"
							BorderBrush="Gray"
							BorderThickness="1">
						<Image />
					</Button>

					<Button Margin="5, 5, 10, 5"
							Height="230"
							Width="310"
							BorderBrush="Gray"
							BorderThickness="1">
						<Image/>
					</Button>
				</UniformGrid>

				<ScrollViewer Grid.Row="1"
							  VerticalScrollBarVisibility="Auto"
							  Margin="5">
					<TextBlock Text="测试测试测试测试测试测试测试测试测试测试测试测试测试测试测试测试测试测试
									 测试测试测试测试测试测试测试测试测试测试测试测试测试测试测试测试测试测试
									 测试测试测试测试测试测试测试测试测试测试测试测试测试测试测试测试测试测试
									 测试测试测试测试测试测试测试测试测试测试测试测试测试测试测试测试测试测试
									 测试测试测试测试测试测试测试测试测试测试测试测试测试测试测试测试测试测试
									 测试测试测试测试测试测试测试测试测试测试测试测试测试测试测试测试测试测试"
							   TextWrapping="Wrap"
							   FontSize="18"
							   FontFamily="微软雅黑"
							   Margin="0, 0, 10, 0"/>
				</ScrollViewer>

				<Button Grid.Row="2"
						Height="70"
						Width="200"
						CornerRadius="10"
						Margin="0, 5"
						HorizontalAlignment="Center"
						Command="{Binding StartCommand}">
					<DockPanel VerticalAlignment="Center"
							   HorizontalAlignment="Center">
						<TextBlock Text="一键启动"
								   FontSize="24"
								   FontFamily="微软雅黑"/>
					</DockPanel>
				</Button>
			</Grid>
		</Border>
	</Grid>
</UserControl>
